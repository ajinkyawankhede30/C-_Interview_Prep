#include <iostream>
#include <stdexcept>

template <typename T>
class Vector {
public:
    Vector();
    ~Vector();

    void push_back(const T& value);
    void pop_back();
    T& at(size_t index);
    size_t size() const;
    bool empty() const;
    void clear();
    
private:
    void resize(size_t new_capacity);

    T* data;
    size_t _size;
    size_t _capacity;
};

template <typename T>
Vector<T>::Vector() : data(nullptr), _size(0), _capacity(0) {}

template <typename T>
Vector<T>::~Vector() {
    delete[] data;
}

template <typename T>
void Vector<T>::push_back(const T& value) {
    if (_size == _capacity) {
        resize((_capacity == 0) ? 1 : 2 * _capacity);
    }
    data[_size++] = value;
}

template <typename T>
void Vector<T>::pop_back() {
    if (_size > 0) {
        --_size;
    }
}

template <typename T>
T& Vector<T>::at(size_t index) {
    if (index >= _size) {
        throw std::out_of_range("Index out of range");
    }
    return data[index];
}

template <typename T>
size_t Vector<T>::size() const {
    return _size;
}

template <typename T>
bool Vector<T>::empty() const {
    return _size == 0;
}

template <typename T>
void Vector<T>::clear() {
    _size = 0;
}

template <typename T>
void Vector<T>::resize(size_t new_capacity) {
    T* new_data = new T[new_capacity];
    for (size_t i = 0; i < _size; ++i) {
        new_data[i] = data[i];
    }
    delete[] data;
    data = new_data;
    _capacity = new_capacity;
}

int main() {
    Vector<int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);

    std::cout << "Vector elements: ";
    for (size_t i = 0; i < vec.size(); ++i) {
        std::cout << vec.at(i) << " ";
    }
    std::cout << std::endl;

    vec.pop_back();

    std::cout << "After pop_back, vector elements: ";
    for (size_t i = 0; i < vec.size(); ++i) {
        std::cout << vec.at(i) << " ";
    }
    std::cout << std::endl;

    return 0;
}
