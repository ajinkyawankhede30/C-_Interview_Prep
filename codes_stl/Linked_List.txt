#include <iostream>

struct Node
{
  int data;
  Node* next;
};

//Append node / Add node at last
void Append(Node** Headref, int data)
{
    Node* new_Node = new Node;
    new_Node->next = NULL;
    new_Node->data = data;
    
    Node* last = *Headref;
    //check if head is empty
    if(*Headref == NULL)
    {
        //assign new node
        *Headref = new_Node;
        return;
    }
    
    //loop untill last node
    while(last->next != NULL)
    {
        last = last->next;
    }
    ///assign new node at last
    last->next = new_Node;
    return;
}

void Insert(Node* previousNode, int data)
{
    if(previousNode == NULL)
    {
        std::cout << "Previous Node cannot be NULL" <<std::endl;
        return;
    }
    
    Node* new_node = new Node;
    new_node->data = data;
    new_node->next = previousNode->next;
    previousNode->next = new_node;
    return;
}

//Push node at the start
void Push(Node** headRef, int data)
{
    Node* new_node = new Node;
    new_node->data = data;
    new_node->next = *headRef;
    *headRef = new_node;
    return;
}

int GetNthnode(Node* head,  int index)
{
    Node* new_node = head;
    int count = 0;
    while(new_node != NULL)
    {
        if(count == index)
            return new_node->data;
        new_node = new_node->next;
        count++;
    }
    return -1;
}

//Get length of linked list
int getCount(Node* head)
{
    int count = 0;
    while(head != NULL)
    {
        count++;
        head = head->next;
    }
    return count;
}

Node* ReverseLinkedList(Node* head)
{
    Node* prev = NULL;
    Node* next = NULL;
    
    while(head != NULL)
    {
        next = head->next;
        head->next = prev;
        prev = head;
        head = next;
    }
    head = prev;
    return head;
}

void DeleteNthNode(Node* head, int index)
{
    Node* temp = head;
    Node* prev = head;
    
    for(int i = 0; i < index; i++)
    {
        if(i == 0 && index == 1)
        {
            head = head->next;
            delete temp;
        }
        else if(i == index-1 && prev != NULL)
        {
            prev->next = temp->next;
            temp = NULL;
        }
        else
        {
            prev = temp;
            
            if(prev == NULL)
                break;
                
            temp = temp->next;
        }
    }
}

int GetLen(Node* head)
{
    int count = 0;
    while(head->next != NULL)
    {
        count++;
        head = head->next;
    }
    return count;
}

void FindMiddleNode(Node* head)
{
    int mid = GetLen(head)/2;
    while(mid)
    {
        head = head->next;
        mid--;
    }
    std::cout << "Mid Node: " << head->data << "\n" << std::endl;
}

void PrintNodes(Node* head)
{
    while(head != NULL)
    {
        std::cout  << " Node data: " << head->data << " | Node Address: " << head->next << std::endl;
        head = head->next;
    }
}

int main()
{
    Node* head = NULL;
    //head->data = 50;
    //head->next = NULL;
    
    Append(&head, 40);
    Append(&head, 30);
    Append(&head, 20);
    Append(&head, 10);
    Insert(head->next, 25);
    Push(&head, 5);
    
    std::cout << "Element at index 4: " << GetNthnode(head, 4) << std::endl;
    PrintNodes(head);
    std::cout <<"Length of linked list: " << getCount(head) << std::endl;
    Node* new_head = ReverseLinkedList(head);
    PrintNodes(new_head);

    //Delete Nodes from end
    std::cout <<"Length of linked list: " << getCount(new_head) << std::endl;
    DeleteLastNode(new_head);
    std::cout <<"Length of linked list: " << getCount(new_head) << std::endl;

    DeleteNthNode(new_head, 4);
    PrintNodes(new_head);

    std::cout<<"\nCount: " << GetLen(head) << std::endl;
    FindMiddleNode(head);
}